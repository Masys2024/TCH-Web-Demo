"use client";

import { DataView } from "@/components/ui/data-table";
import {
  AlertCircleIcon,
  ArrowDown,
  ArrowRight,
  ArrowUp,
  CheckCircle,
  Circle,
  CircleOff,
  HelpCircle,
  Timer,
} from "lucide-react";
import { useState } from "react";

const sampleData = [
  {
    id: 1,
    name: "Task 1",
    status: "todo",
    priority: "high",
    description: "Complete project proposal",
  },
  {
    id: 2,
    name: "Task 2",
    status: "in-progress",
    priority: "medium",
    description: "Review code changes",
  },
  {
    id: 3,
    name: "Task 3",
    status: "done",
    priority: "low",
    description: "Update documentation",
  },
  {
    id: 4,
    name: "Task 4",
    status: "todo",
    priority: "low",
    description: "Fix minor bugs",
  },
  {
    id: 5,
    name: "Task 5",
    status: "done",
    priority: "high",
    description: "Deploy to production",
  },
];

const sampleColumns = [
  {
    id: "select",
    header: ({ table }) => (
      <input
        type="checkbox"
        checked={table.getIsAllPageRowsSelected()}
        onChange={(e) => table.toggleAllPageRowsSelected(e.target.checked)}
      />
    ),
    cell: ({ row }) => (
      <input
        type="checkbox"
        checked={row.getIsSelected()}
        onChange={(e) => row.toggleSelected(e.target.checked)}
      />
    ),
  },
  {
    accessorKey: "id",
    header: "ID",
  },
  {
    accessorKey: "name",
    header: "Name",
  },
  {
    accessorKey: "status",
    header: "Status",
    cell: ({ getValue }) => {
      const status = getValue();
      const colors = {
        todo: "bg-yellow-100 text-yellow-800",
        "in-progress": "bg-blue-100 text-blue-800",
        done: "bg-green-100 text-green-800",
      };
      return (
        <span className={`px-2 py-1 rounded text-xs ${colors[status]}`}>
          {status}
        </span>
      );
    },
  },
  {
    accessorKey: "priority",
    header: "Priority",
  },
  {
    accessorKey: "actions",
    header: "",
    cell: TaskActions,
  },
];

export const statuses = [
  {
    label: "Backlog",
    value: "backlog",
    icon: HelpCircle,
  },
  {
    label: "Todo",
    value: "todo",
    icon: Circle,
  },
  {
    label: "In Progress",
    value: "in progress",
    icon: Timer,
  },
  {
    label: "Done",
    value: "done",
    icon: CheckCircle,
  },
  {
    label: "Canceled",
    value: "canceled",
    icon: CircleOff,
  },
];

export const priorities = [
  {
    label: "Low",
    value: "low",
    icon: ArrowDown,
  },
  {
    label: "Medium",
    value: "medium",
    icon: ArrowRight,
  },
  {
    label: "High",
    value: "high",
    icon: ArrowUp,
  },
  {
    label: "Critical",
    value: "critical",
    icon: AlertCircleIcon,
  },
];

// Custom List Item
function CustomListItem({ row, actionsComponent }) {
  const data = row.original;
  const Actions = actionsComponent;
  return (
    <div className="border rounded-lg p-4 hover:shadow-md transition-shadow">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3 flex-1">
          <input
            type="checkbox"
            checked={row.getIsSelected()}
            onChange={(e) => row.toggleSelected(e.target.checked)}
          />
          <div className="flex-1">
            <h3 className="font-semibold">{data.name}</h3>
            <p className="text-sm text-gray-600">{data.description}</p>
          </div>
        </div>
        <div className="flex items-center gap-3">
          <span
            className={`px-2 py-1 rounded text-xs ${
              data.status === "done"
                ? "bg-green-100 text-green-800"
                : data.status === "in-progress"
                ? "bg-blue-100 text-blue-800"
                : "bg-yellow-100 text-yellow-800"
            }`}
          >
            {data.status}
          </span>
          <span className="text-sm text-gray-500">{data.priority}</span>
          {Actions && <Actions row={row} />}
        </div>
      </div>
    </div>
  );
}

// Custom Grid Item
function CustomGridItem({ row, actionsComponent }) {
  const data = row.original;
  const Actions = actionsComponent;
  return (
    <div className="border rounded-lg p-4 hover:shadow-lg transition-shadow">
      <div className="space-y-3">
        <div className="flex items-center justify-between">
          <input
            type="checkbox"
            checked={row.getIsSelected()}
            onChange={(e) => row.toggleSelected(e.target.checked)}
          />
          <span className="text-sm text-gray-500">#{data.id}</span>
        </div>
        <h3 className="font-semibold text-lg">{data.name}</h3>
        <p className="text-sm text-gray-600">{data.description}</p>
        <div className="flex items-center justify-between">
          <span
            className={`px-2 py-1 rounded text-xs ${
              data.status === "done"
                ? "bg-green-100 text-green-800"
                : data.status === "in-progress"
                ? "bg-blue-100 text-blue-800"
                : "bg-yellow-100 text-yellow-800"
            }`}
          >
            {data.status}
          </span>
          <span className="text-sm font-medium">{data.priority}</span>
        </div>
        {Actions && (
          <div className="pt-3 border-t">
            <Actions row={row} />
          </div>
        )}
      </div>
    </div>
  );
}

// Example Actions Component
function TaskActions({ row }) {
  const [isOpen, setIsOpen] = useState(false);
  const data = row.original;

  const handleEdit = () => {
    alert(`Edit task: ${data.name}`);
    setIsOpen(false);
  };

  const handleDelete = () => {
    alert(`Delete task: ${data.name}`);
    setIsOpen(false);
  };

  const handleDuplicate = () => {
    alert(`Duplicate task: ${data.name}`);
    setIsOpen(false);
  };

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="p-2 hover:bg-gray-100 rounded"
        aria-label="Actions"
      >
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"
          />
        </svg>
      </button>

      {isOpen && (
        <>
          <div
            className="fixed inset-0 z-10"
            onClick={() => setIsOpen(false)}
          />
          <div className="absolute right-0 mt-1 w-40 bg-white border rounded shadow-lg z-20">
            <button
              onClick={handleEdit}
              className="w-full text-left px-4 py-2 hover:bg-gray-50 flex items-center gap-2"
            >
              <svg
                className="w-4 h-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                />
              </svg>
              Edit
            </button>
            <button
              onClick={handleDuplicate}
              className="w-full text-left px-4 py-2 hover:bg-gray-50 flex items-center gap-2"
            >
              <svg
                className="w-4 h-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
                />
              </svg>
              Duplicate
            </button>
            <button
              onClick={handleDelete}
              className="w-full text-left px-4 py-2 hover:bg-gray-50 text-red-600 flex items-center gap-2"
            >
              <svg
                className="w-4 h-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                />
              </svg>
              Delete
            </button>
          </div>
        </>
      )}
    </div>
  );
}

export default function App() {
  return (
    <div className="p-8 max-w-7xl mx-auto">
      <h1 className="text-3xl font-bold mb-6">Multi-View Data Display</h1>
      <DataView
        data={sampleData}
        columns={sampleColumns}
        searchPlaceholder="Search tasks by id or name..."
        searchKeys={["id", "status"]}
        filters={[
          {
            columnId: "status",
            title: "Status",
            options: statuses,
          },
          {
            columnId: "priority",
            title: "Priority",
            options: priorities,
          },
        ]}
        defaultPageSize={4}
        defaultView="table"
        enableViewToggle={true}
        listItemComponent={CustomListItem}
        gridItemComponent={CustomGridItem}
        actionsComponent={TaskActions}
        enableRowSelection={true}
        enablePagination={true}
        enableSorting={true}
        enableFiltering={true}
      />
    </div>
  );
}
